// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  firstName             String
  lastName              String
  phone                 String
  posts                 Post[]
  password              String
  Session               Session?
  isVerified            Boolean                @default(false)
  userValidation        userValidation?
  passwordChangeSession passwordChangeSession?
}

model Post {
  user               User      @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  userId             String
  postId             String    @id @default(uuid())
  postTitle          String
  postDescrition     String
  postValue          Int
  updatedAt          DateTime  @default(now()) @updatedAt
  address            String
  state              String
  cep                String
  sizeInSquareMeters String
  isClosed           Boolean   @default(false)
  pictures           Picture[]
}

model Picture {
  post       Post   @relation(fields: [postPostId], references: [postId],onDelete: Cascade, onUpdate: Cascade)
  postPostId String
  pictureId  String @id @default(uuid())
  pictureUrl String
}

model Session {
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String @unique
  sessionId String @id @default(uuid())
  expiresAt DateTime 
  createdAt DateTime @default(now())

}

model userValidation {
  id        String   @id @default(uuid())
  token     String   @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id] ,onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model passwordChangeSession {
  id        String   @id @default(uuid())
  token     String   @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id] ,onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}
